@model List<ChatMessages>
@{
    Layout = null;
}
<style>
</style>
<div class="bg-dark text-center" style="color:white;padding-top:4px; padding-bottom:4px;font-size:14px;">
    @if (ViewBag.Person != "undefined")
    {
        <b>@ViewBag.Person</b>
        <span>-</span>
    }
    @ViewBag.Phone
</div>
<div class="bg-dark chat-messages-container" id="chat-messages-container">
    <div class="invisible text-center" id="loading">
        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; background: none; display: block; shape-rendering: auto;" width="22px" height="22px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
            <circle cx="50" cy="50" fill="none" stroke="#c8472c" stroke-width="10" r="35" stroke-dasharray="164.93361431346415 56.97787143782138" transform="rotate(22.4333 50 50)">
                <animateTransform attributeName="transform" type="rotate" repeatCount="indefinite" dur="0.9345794392523364s" values="0 50 50;360 50 50" keyTimes="0;1" />
            </circle>
        </svg>
    </div>

    @foreach (var item in Model.OrderBy(o => o.ChatMessageId))
    {
        <div id="old-messages">

        </div>
        if (item.MessageDirection == Enums.ChatMessageFromClient)
        {
            <div class="text-left chat-massage-client">
                @item.Message
                <div class="text-right date-format">
                    @DateProcess(item.MessageDate)
                </div>
            </div>

        }
        else
        {
            <div class="text-right chat-massage-agent">
                @item.Message
                <div class="text-left date-format">
                    @DateProcess(item.MessageDate)
                    @if (item.AnsweringUserId == Enums.SmartReplyAgentId)
                    {
                        <span> from Smart Reply! </span>
                    }
                </div>
            </div>
        }
    }
</div>
<div class="bg-dark">
    <div style="padding:11px;">
        <textarea id="message-area" class="form-control textarea" rows="3" style="background-color:transparent;color:white;"></textarea>
        <button id="send-whatsapp" name="send-whatsapp" class="form-control send-whatsapp">Send</button>
    </div>
</div>
@{
    string DateProcess(DateTime MessageDate)
    {
        string date = "";
        if (DateTime.Today > MessageDate.Date)
        {
            date = MessageDate.Day.ToString() + ' ' + MessageDate.ToString("MMMM", System.Globalization.CultureInfo.InvariantCulture) + ' ' + MessageDate.ToShortTimeString();
        }
        else
        {
            date = MessageDate.ToShortTimeString();
        }
        return date;
    }
}
<script>
    $(document).ready(function () {
        scrollAlwaysBottom();
        var counter = 1;
        var noResult = false;
        let chatId = @ViewBag.ChatId;

        var connection = new signalR.HubConnectionBuilder().withUrl("/whatsappHub").build();
        $('#send-whatsapp').prop('disabled', true);

        connection.on("ReceiveMessage", function (_chatId, message) {
            if (_chatId == chatId) {
                var htmlData = '<div class="text-right chat-massage-agent">';
                htmlData += message + '<div class="text-right date-format">' + DateProcess(Date.now()) + '</div></div>';
                $('#chat-messages-container').append(htmlData);
                scrollAlwaysBottom();
            }
        });

        connection.start().then(function () {
            $('#send-whatsapp').prop('disabled', false);
        }).catch(function (err) {
            handleError(err.status);
        });
        //Send Agent Message to Client
        $('#send-whatsapp').click(function (event) {
            let message = $.trim($("#message-area").val());
            if (message.length>0) {
                connection.invoke("SendMessage", chatId, message).catch(function (err) {
                    handleError(err.status);
                });
            } else {
                alert("You can't send empty message!");
            }
            event.preventDefault();
        })
        /* Returns Old Messages to Chat */
        $('#chat-messages-container').scroll(function () {
                if ($(this).scrollTop() < 10) {
                let take = @ViewBag.Take;
                let skip = take * counter;
                if (noResult != true) {
                    $('#loading').removeClass('invisible');
                    setTimeout(function () {
                        $.ajax({
                            url: '/Inbox/SkipTakeMessages?chatId=' + chatId + '&skip=' + skip + '&take=' + take,
                            type: 'POST',
                            dataType: 'json',
                            success: function (data) {
                                if (data.length == 0) {
                                    noResult = true;
                                }

                                $.each(data, function (index, item) {
                                    if (index == 0) {
                                        var htmlData = '<div class="bg-light" style="height:0.1px;margin-left:80px;margin-right:80px;"></div>';
                                        $('#old-messages').prepend(htmlData);
                                    }
                                    if (item.messageDirection == @Enums.ChatMessageFromClient.ToString().ToLower()) {
                                        var htmlData = '<div class="text-left chat-massage-client">';
                                        htmlData += item.message + '<div class="text-right date-format">' + DateProcess(item.messageDate) + '</div></div>';
                                        $('#old-messages').prepend(htmlData);
                                    }
                                    else {
                                        var htmlData = '<div class="text-right chat-massage-agent">';
                                        if (item.AnsweringUserId == @Enums.SmartReplyAgentId) {
                                            htmlData += item.message + '<div class="text-right date-format">' + DateProcess(item.messageDate) + '<span> from Smart Reply! </span></div></div>';
                                        }
                                        else {
                                            htmlData += item.message + '<div class="text-right date-format">' + DateProcess(item.messageDate) + '</div></div>';
                                        }
                                        $('#old-messages').prepend(htmlData);
                                    }
                                    $('#chat-messages-container').scrollTop(150);
                                });
                            },
                            error: function (response) {
                                if (response.status == '401') {
                                    window.location.href = '/Account/Login?ReturnUrl=%2FInbox%2FIndex';
                                }
                                else {
                                    alert("Error Occurred.(Cbx01)");
                                }
                            }
                        });
                        counter++;
                        $('#loading').addClass('invisible');
                    }, 100);

                }
            }
         })

        $('#send-whatsapp').click(function () {
            var message = $('#message-area').val();
            $.ajax({
                url: '/Webhooks/SendOutgoingWhatsappMessage?message=' + message + '&chatId=' + chatId,
                type: 'POST',
                dataType: 'html',
                success: function (data) {
                    $("#chatbox-container").html(data);
                },
                error: function (response) {
                    if (response.status == '401') {
                        window.location.href = '/Account/Login?ReturnUrl=%2FInbox%2FIndex';
                    }
                    else {
                        alert("Error Occurred.");
                    }
                }
            })
        })
        $('#message-area').keypress(function (e) {
            var key = e.which;
            if (e.keyCode == 13 && e.shiftKey) //shift + enter for new line
            {
                $(this).val($(this).val() + '\n');
                e.preventDefault();
            }
            else if (key == 13)  // trigger send-whatsapp when enter pressed
            {
                $('button[name = send-whatsapp]').click();
                $(this).val('');
                return false;
            }
        });

    })

    function scrollAlwaysBottom() {
        var messageBody = document.querySelector('#chat-messages-container');
        messageBody.scrollTop = messageBody.scrollHeight - messageBody.clientHeight;
    }

    function handleError(status) {
        if (status == '1006') {
            window.location.href = '/Account/Login?ReturnUrl=%2FInbox%2FIndex';
        }
        else {
            return console.error(err.toString());
        }
    }
    function DateProcess(messageDate) {
        const date = new Date(messageDate);
        const dateTimeFormat = new Intl.DateTimeFormat('en', { year: 'numeric', month: 'short', day: '2-digit' })
        const [{ value: month }, , { value: day }, , { value: year }] = dateTimeFormat.formatToParts(date)

        return `${day} ${month} ${year}`;
    }
</script>